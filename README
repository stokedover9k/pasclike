Author: Yuriy Skobov

This package contains a parser with a type checking sysmtem for a Pascal-like language.

NOTE: The code was tested on energon1.

=======================================
=========      COMPILE      ===========
=======================================
Executing 'make' will compile the parser.

----- Parser -----

The parser is compiled by executing 'make'. An executable named
"parser-pasclike" will be created. This program takes the input program as its
first argument. If no argument is given, the parser reads the program from standard
input. The parser will produce a file "symtable.out" with the printout of the symbol
table of the parsed program. It will also produce a file "rules.out" with the 
reductions taken during the parse. Type error messages will be printed to standard
out.

========================================
===========     RUN     ================
========================================
The parser takes as its first arguments the name of the program to be processed. 
If no such file is provided, the parser read from the standard input.

* run  parser: ./parser-pasclike   test-program-data
           or: ./parser-pasclike < test-program-date

Running the parser will produce the following files:

* symtable.out
* rules.out

- symtable.out contains the symbol table created during the parse. Scopes are
  created per function or record, and are printed with a unique id (currently, 
  address) at the top. Following each scope id are symbols with their symbol-types
  and names defined in that scope.
  
- rules.out contains the reductions taken during the parse of the program.

- Additionally, type error messages are printed to standard out.
